
&НаКлиенте
Процедура Команда1(Команда)
	ЗагрузитьПлатежкиЕФС();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьОшибочные(Команда)
	ЗагрузитьОшибочныеПлатежки();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСправочники(Команда)
	ЗагрузитьСправочникиЕФС();
КонецПроцедуры

#Область ДанныеПодключения

Функция ПарольСКЛ()
Возврат "e1OGyXML5s";	
КонецФункции

Функция ПользовательСКЛ()
Возврат "CDW_test_reader";	
КонецФункции

Функция БазаСКЛ()
Возврат "PIK.MDS.Database_DEV";	
КонецФункции

Функция СерверСКЛ()
Возврат "mob01tst\bi";	
КонецФункции

Функция ПолучитьСтрокуПодключения()
	
	Возврат  "Provider=SQLOLEDB.1;Password="""+ПарольСКЛ()+""";Persist Security Info=True;User ID="+ПользовательСКЛ()+";Initial Catalog="+БазаСКЛ()+";Data Source="+СерверСКЛ();
	
КонецФункции	

Функция КолЗаписейСКЛ(ОграничениеТрафика)

	Если ОграничениеТрафика = 0 Тогда 
		КолЗаписей = "";
	иначе	
		КолЗаписей = "TOP ("+Формат(ОграничениеТрафика,"ЧРД=.; ЧН=; ЧГ=0") +")";
	КонецЕсли;
	
	Возврат КолЗаписей;
	
КонецФункции	
	
#КонецОбласти

#Область ВспомогательныеФункцииДляОбмена

Функция ПолучитьОграничениеТрафика() 
	ОграничениеТрафика = Константы.пик_ОрганичениеКоличестваЗагруженныхОбъектов.Получить();
	Если ОграничениеТрафика = 0 Тогда
		ОграничениеТрафика = 1000;
	КонецЕсли;	
	Возврат ОграничениеТрафика; 
КонецФункции	

Функция ПолучитьОрганизацииДляЗагрузки()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УчетнаяПолитикаСрезПоследних.Организация КАК Организация,
		|	УчетнаяПолитикаСрезПоследних.Организация.Guid КАК Guid
		|ИЗ
		|	РегистрСведений.УчетнаяПолитика.СрезПоследних КАК УчетнаяПолитикаСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	

Функция ПоискДокумента(ИмяТипа1С, Guid1C)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПоиска.Ссылка КАК Ссылка,
		|	ДокументПоиска.Проведен КАК Проведен
		|ИЗ
		|	Документ.СписаниеСРасчетногоСчета КАК ДокументПоиска
		|ГДЕ
		|	ДокументПоиска.Guid = &Guid";
	
	Запрос.Текст  = СтрЗаменить(Запрос.Текст, "Документ.СписаниеСРасчетногоСчета" ,  ИмяТипа1С);
	Запрос.УстановитьПараметр("Guid",Guid1C); 
	Если Guid1C = "" тогда 
		Запрос.Текст  = СтрЗаменить(Запрос.Текст, "СправочникПоиска.Guid = &Guid" ,  "Ложь");
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
	
	
КонецФункции	

Функция ПоискСправочника(ИмяТипа1С, Guid1C)
	
	Если Guid1C = "" тогда 
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникПоиска.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.пик_КонтрагентыКонсолидированные КАК СправочникПоиска
		|ГДЕ
		|	СправочникПоиска.Guid = &Guid";
	
	Запрос.Текст  = СтрЗаменить(Запрос.Текст, "Справочник.пик_КонтрагентыКонсолидированные" ,  ИмяТипа1С);
	Запрос.УстановитьПараметр("Guid",Guid1C); 
	Если Guid1C = "" тогда 
		Запрос.Текст  = СтрЗаменить(Запрос.Текст, "СправочникПоиска.Guid = &Guid" ,  "Ложь");
	КонецЕсли;	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции	

Функция ПоискПеречисления(ИмяТипа1С, ID, ConnectionSQL)

	Если ID = 0 тогда
		Возврат Неопределено;
	КонецЕсли;
	ТЗПеречисление = СформироватьиВыполнитьSELECTЗапросSQL("cdw.Enum",Новый Структура("Name",""),  Новый Структура("ID",ID) ,  ConnectionSQL);
	
	Если ТЗПеречисление.Количество() <> 0 Тогда
		
		Возврат ПредопределенноеЗначение(ИмяТипа1С+"."+ТЗПеречисление[0].Name);
		
	КонецЕсли;	
	
КонецФункции	
	
Функция НайтиКонтрагентаПоКонсолидированному(КСК)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.пик_КСК = &КонтрагентКСК";
	
	Запрос.УстановитьПараметр("КонтрагентКСК", КСК);
	
	Реультат = Запрос.Выполнить();
	
	Выборка = Реультат.Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	
КонецФункции

Функция НайтиЛокальныйДоговорКонтрагента(Организация, пик_КонтрагентКонсолидированный, пик_ДоговорКонтрагентаКонсолидированный, Контрагент)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пик_РегистрацияДоговоровПоВидамРасчетов.КлючВыбораДоговора КАК КлючВыбораДоговора,
		|	пик_РегистрацияДоговоровПоВидамРасчетов.ВидРасчетов КАК ВидРасчетов,
		|	ВЫБОР
		|		КОГДА пик_РегистрацияДоговоровПоВидамРасчетов.КлючВыбораДоговора ССЫЛКА Справочник.ДоговорыКонтрагентов
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.пик_РегистрацияДоговоровПоВидамРасчетов КАК пик_РегистрацияДоговоровПоВидамРасчетов
		|ГДЕ
		|	пик_РегистрацияДоговоровПоВидамРасчетов.Организация = &Организация
		|	И пик_РегистрацияДоговоровПоВидамРасчетов.ДоговорКонсолидированный = &ДоговорКонсолидированный
		|	И пик_РегистрацияДоговоровПоВидамРасчетов.КонтрагентКонсолидированный = &КонтрагентКонсолидированный
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("ДоговорКонсолидированный", пик_ДоговорКонтрагентаКонсолидированный);
	Запрос.УстановитьПараметр("КонтрагентКонсолидированный", пик_КонтрагентКонсолидированный);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
	
		Если ВыборкаДетальныеЗаписи.Порядок = 0 Тогда
			Возврат  ВыборкаДетальныеЗаписи.КлючВыбораДоговора;
		Иначе
			// создаем локальный договор
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Организация", Организация);
			
			ПараметрыОтбора.Вставить("Владелец"	  , Контрагент );
			ПараметрыОтбора.Вставить("ВидВзаиморасчетов", ВыборкаДетальныеЗаписи.ВидРасчетов);
			ПараметрыОтбора.Вставить("КСД", пик_ДоговорКонтрагентаКонсолидированный);
			
			РезультатПоиска = пик_РаботаСКонсолидированнымиДоговорами.ПолучитьЛокальныйДоговорПоПараметрам(ПараметрыОтбора, Истина);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				Результат = Справочники.ДоговорыКонтрагентов.ПустаяСсылка()	;	
			Иначе
				Результат = РезультатПоиска[0];
			КонецЕсли;
			
			Возврат Результат;
			
		КонецЕсли;
	Иначе
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();		
	КонецЕсли;	
	
КонецФункции 	

Функция ПолучитьЛокальныйБС(БСКонтрагентаКонс, Владелец)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БанковскиеСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.БанковскиеСчета КАК БанковскиеСчета
		|ГДЕ
		|	БанковскиеСчета.пик_БанковскиеСчетаКонсолидированные = &пик_БанковскиеСчетаКонсолидированные
		|	И БанковскиеСчета.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("пик_БанковскиеСчетаКонсолидированные", БСКонтрагентаКонс);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе	
		Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
	КонецЕсли;	

	
КонецФункции 	

#КонецОбласти  

#область РегистрыДляОбмена

Функция ПолучитьМаксимальнуюВерсию(ИмяТипа1С, Система, Организация)

	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	пик_МеткиОбъектовЗагруженныхПоследними.МеткаОбъектаЗагруженногоПоследним КАК МеткаОбъектаЗагруженногоПоследним
		|ИЗ
		|	РегистрСведений.пик_МеткиОбъектовЗагруженныхПоследними КАК пик_МеткиОбъектовЗагруженныхПоследними
		|ГДЕ
		|	пик_МеткиОбъектовЗагруженныхПоследними.Система = &Система
		|	И пик_МеткиОбъектовЗагруженныхПоследними.ИмяТипа1С = &ИмяТипа1С
		|	И пик_МеткиОбъектовЗагруженныхПоследними.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ИмяТипа1С", ИмяТипа1С);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Система", Система);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.МеткаОбъектаЗагруженногоПоследним;
	Иначе	
		Возврат 0;
	КонецЕсли;		
	
КонецФункции 	

Процедура ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Система, Организация, МеткаОбъектаЗагруженногоПоследним)

	Запись = РегистрыСведений.пик_МеткиОбъектовЗагруженныхПоследними.СоздатьМенеджерЗаписи();
	
	Запись.ИмяТипа1С = ИмяТипа1С;
	Запись.Система = Система;
	Запись.Организация = Организация;
	Запись.МеткаОбъектаЗагруженногоПоследним = МеткаОбъектаЗагруженногоПоследним;
	
	Запись.Записать(Истина);
	
КонецПроцедуры	

Процедура ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, Guid1C, Причина ,ОписаниеОшибки = "");
	Запись = РегистрыСведений.пик_ЖурналОшибокИнтеграций.СоздатьМенеджерЗаписи();
	
	Запись.ИмяТипа1С = ИмяТипа1С;
	Запись.Система = Система;
	Запись.Организация = Организация;
	Запись.GUID = Guid1C;
	Запись.ДатаПолучения = ТекущаяДатаСеанса();
	Запись.Причина = Причина;
	Запись.ОписаниеОшибки = ОписаниеОшибки;
	
	Запись.Записать(Истина);
КонецПроцедуры

Функция ПолучитьЗаписиСОшибками(ИмяТипа1С, Система, Организация, ОграничениеТрафика)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ "+ОграничениеТрафика+"
		|	пик_ЖурналОшибокИнтеграций.GUID КАК GUID
		|ИЗ
		|	РегистрСведений.пик_ЖурналОшибокИнтеграций КАК пик_ЖурналОшибокИнтеграций
		|ГДЕ
		|	пик_ЖурналОшибокИнтеграций.Система = &Система
		|	И пик_ЖурналОшибокИнтеграций.ИмяТипа1С = &ИмяТипа1С
		|	И пик_ЖурналОшибокИнтеграций.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ИмяТипа1С", ИмяТипа1С);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Система", Система);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("GUID");
	
	
КонецФункции

Процедура УдалитьЗаписьОшибки(ИмяТипа1С, Система, Организация, GuidОш);

	Записи = РегистрыСведений.пик_ЖурналОшибокИнтеграций.СоздатьНаборЗаписей();
	
	Записи.отбор.ИмяТипа1С.Установить(ИмяТипа1С);
	Записи.отбор.Система.Установить(Система);
	Записи.отбор.Организация.Установить(Организация);
	Записи.отбор.GUID.Установить(GuidОш);
	
	Записи.записать();
	
КонецПроцедуры	

#КонецОбласти

#Область ЗагрузкаПлатежекЕФС

Процедура ЗагрузитьПлатежкиЕФС(Ошибочные = Ложь)  Экспорт
	
	СтрПодключения = ПолучитьСтрокуПодключения();
	
	clnConn = Неопределено;
	ConnectionSQL = УстановитьСоединениеSQL(СтрПодключения, clnConn);
	
	ОграничениеТрафика = ПолучитьОграничениеТрафика();
	
	ОрганизацииДляЗагрузки = ПолучитьОрганизацииДляЗагрузки();
	
	Для Каждого СтрокаОрг Из ОрганизацииДляЗагрузки Цикл
				
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.СписаниеСРасчетногоСчета", 	"cdw.WriteOffFromAccount",  Ошибочные);
		ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,"Документ.ПоступлениеНаРасчетныйСчет", "cdw.ReceiptOnAccount", 	Ошибочные);
		
	КонецЦикла;
	
	ConnectionSQL.Close();
	
КонецПроцедуры

Процедура ЗагрузитьОшибочныеПлатежки() Экспорт
	
	ЗагрузитьПлатежкиЕФС(Истина);
	
КонецПроцедуры

Процедура ЗагрузитьПлатежныеДокументы(СтрокаОрг, ConnectionSQL, ОграничениеТрафика,ИмяТипа1С, ИмяТаблицыСКЛ, ЗагрузкаОшибочных = Ложь)

	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию(ИмяТипа1С, Система, СтрокаОрг.Организация);
	
	СтруктураДанныхП = ПолучитьСтруктуруДанныхПлатежки(ИмяТипа1С);
	СтруктураДанныхП_ТЧ  = ПолучитьСтруктуруДанныхПлатежки_ТЧ(ИмяТипа1С);
	
	Если НЕ ЗагрузкаОшибочных Тогда 
		// отбор по организации и версии
		СтруктураОтбора = Новый Структура("some_text", "VersionNumber > "+ТекМаксВерсия+ " AND CompanyGuid1C = '" +СтрокаОрг.GUID+"'");
		СтруктураСортировки = Новый Структура("VersionNumber","") ;
		
		КолЗаписей = КолЗаписейСКЛ(ОграничениеТрафика);
		
		// получили нужные документы
		ЗаписиДок = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанныхП, СтруктураОтбора, ConnectionSQL, КолЗаписей, СтруктураСортировки); 	
		
		Для Каждого СтрокаЗаписи Из ЗаписиДок Цикл
			СтруктураОтбора_ТЧ= Новый Структура("some_text", "Guid1C = '"+СтрокаЗаписи.Guid1C+"'");
			ЗаписиТЧ = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ+"_T", СтруктураДанныхП_ТЧ, СтруктураОтбора_ТЧ, ConnectionSQL, , ); 	
			
			ЗагрузитьПлатежку(СтрокаЗаписи, ЗаписиТЧ, ИмяТипа1С, СтрокаОрг.Организация, ConnectionSQL, Система);
			
		КонецЦикла;
		
		// раскомментировать после отладки
		//Если ЗаписиДок.Количество() > 0 Тогда
		//	ЗаписатьНовуюМаксВерсию(ИмяТипа1С, Перечисления.пик_СистемыХраненияДанных.CDW, СтрокаОрг.Организация, СтрокаЗаписи.VersionNumberString);
		//КонецЕсли;
		
	Иначе 
		
		GuidыОшибочных = ПолучитьЗаписиСОшибками(ИмяТипа1С, Система, СтрокаОрг.Организация, ОграничениеТрафика);
		
		
		Для Каждого GuidОш Из GuidыОшибочных Цикл
			СтруктураОтбора= Новый Структура("some_text", "Guid1C = '"+GuidОш+"'");
			
			УдалитьЗаписьОшибки(ИмяТипа1С, Система, СтрокаОрг.Организация, GuidОш);
			
			ТЗЗаписи  = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ, СтруктураДанныхП, СтруктураОтбора, ConnectionSQL, , ); 	
			
			Если ТЗЗаписи.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;	
			
			ЗаписиТЧ = СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицыСКЛ+"_T", СтруктураДанныхП_ТЧ, СтруктураОтбора, ConnectionSQL, , ); 	
			
			ЗагрузитьПлатежку(ТЗЗаписи[0], ЗаписиТЧ, ИмяТипа1С, СтрокаОрг.Организация, ConnectionSQL, Система);
			
		КонецЦикла;	
		
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура ЗагрузитьПлатежку(СтрокаЗаписи, ЗаписиТЧ, ИмяТипа1С, Организация, ConnectionSQL, Система);

	НайтиДокумент = ПоискДокумента(ИмяТипа1С, СтрокаЗаписи.Guid1C);
	ВалРег = Константы.ВалютаРегламентированногоУчета.Получить();
	
	#Область СРС
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.СписаниеСРасчетногоСчета.СоздатьДокумент();
			ДокументОбъектСсылка = Документы.СписаниеСРасчетногоСчета.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		ДокументОбъект.НеПодтвержденоВыпискойБанка =  СтрокаЗаписи.NotConfirmBankStatement;
		ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		иначе	
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийСписаниеДенежныхСредств", СтрокаЗаписи.OperationTypeWriteOffFromAccount, ConnectionSQL);
		
		ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		// бс контрагента
		Если СтрокаЗаписи.ContractorAccountGuid1C <> "" Тогда
			ТЗБСКонтрагентаКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.ContractorAccountGuid1C);
			Если ТЗБСКонтрагентаКонс.Количество()<>0 Тогда
				БСКонтрагентаКонс = ТЗБСКонтрагентаКонс[0].Ссылка;
				ДокументОбъект.СчетКонтрагента = ПолучитьЛокальныйБС(БСКонтрагентаКонс, ДокументОбъект.Контрагент);
				Если ДокументОбъект.СчетКонтрагента.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// бс организации
		Если СтрокаЗаписи.CompanyAccountGuid1C <> "" Тогда
			ТЗБСОргКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.CompanyAccountGuid1C);
			Если ТЗБСОргКонс.Количество()<>0 Тогда
				БСОргКонс = ТЗБСОргКонс[0].Ссылка;
				ДокументОбъект.СчетОрганизации = ПолучитьЛокальныйБС(БСОргКонс, Организация);
				Если ДокументОбъект.СчетОрганизации.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет организации по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет организации в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетов;
		СчетАвансов = Счета.СчетАвансов;
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
				
				ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
				Если ТЗОбъектыИДП<>0 Тогда
					НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
				Иначе	
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
					//Возврат;
				КонецЕсли; 
				
				
			КонецЕсли; 
			
			// заполнение НДС
			Если Ложь Тогда
				СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
				
				НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС))
				
			КонецЕсли; 	
			
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ПРС
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		
		Если НайтиДокумент.Количество() = 0 Тогда 
			
			Если СтрокаЗаписи.Marked Тогда 
				// не буду загружать помеченные
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
			ДокументОбъектСсылка = Документы.ПоступлениеНаРасчетныйСчет.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.Guid1C)));
			ДокументОбъект.УстановитьСсылкуНового(ДокументОбъектСсылка);		
			
		Иначе 	
			
			Если НайтиДокумент[0].Проведен Тогда 
				// не буду загружать проведенный документ
				Возврат;
			КонецЕсли;	
			
			ДокументОбъект = НайтиДокумент[0].Ссылка.ПолучитьОбъект();
			
		КонецЕсли;	
		
		ДокументОбъект.GUID = СтрокаЗаписи.Guid1C;
		ДокументОбъект.ПометкаУдаления  = СтрокаЗаписи.Marked;
		ДокументОбъект.Номер  = СтрокаЗаписи.Number;
		ДокументОбъект.Дата  = СтрокаЗаписи.Date;
		ДокументОбъект.пик_ПлатежОтТретьегоЛица  = СтрокаЗаписи.AccountsThirdParties;
		ДокументОбъект.Организация = Организация;
		ДокументОбъект.ПодразделениеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"пик_ОсновноеПодразделение");
		ДокументОбъект.НомерВходящегоДокумента =  СтрокаЗаписи.NumInDocument;
		ДокументОбъект.СуммаДокумента = СтрокаЗаписи.SumDoc;
		ДокументОбъект.НазначениеПлатежа  = СтрокаЗаписи.PaymentPurpose;
		ДокументОбъект.Комментарий = "Загружено из CDW автоматически "+ Строка(ТекущаяДатаСеанса());
		
		//Если СтрокаЗаписи.DocumentCurrencyGuid1C <>"" тогда
		//	ДокументОбъект.ВалютаДокумента= Справочники.Валюты.ПолучитьСсылку(Новый УникальныйИдентификатор(СокрЛП(СтрокаЗаписи.DocumentCurrencyGuid1C)));
		//КонецЕсли;
		Если ДокументОбъект.ВалютаДокумента.пустая() Тогда  
			ТЗВалютаДокумента = ПоискСправочника("Справочник.Валюты",СтрокаЗаписи.DocumentCurrencyGuid1C);
			Если ТЗВалютаДокумента.Количество()<>0 Тогда
				
				ДокументОбъект.ВалютаДокумента = ТЗВалютаДокумента[0].Ссылка;
			Иначе	
				ДокументОбъект.ВалютаДокумента =  ВалРег;
			КонецЕсли;	
		КонецЕсли;
		
		если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
		иначе	
			ДокументОбъект.Счетбанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
		КонецЕсли;	
		
		ДокументОбъект.ВидОперации = ПоискПеречисления("Перечисление.ВидыОперацийПоступлениеДенежныхСредств", СтрокаЗаписи.OperationTypeRecieptOnAccount, ConnectionSQL);
		
		ДокументОбъект.ДатаВходящегоДокумента =   СтрокаЗаписи.DateInDocument;
		
		
		// консолидированный контрагент
		Если СтрокаЗаписи.Contractor_IID <> "" Тогда
			
			ТЗКонтр = СформироватьиВыполнитьSELECTЗапросSQL("service.Instance", Новый Структура("ExternalID",""), Новый Структура("InstanceId",СтрокаЗаписи.Contractor_IID), ConnectionSQL ); 	
			
			Если ТЗКонтр.Количество() = 0 Тогда
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в Инстанс");
				//Возврат;
			КонецЕсли;
			ТЗКонтрагентКонсолидированный = ПоискСправочника("Справочник.пик_КонтрагентыКонсолидированные",ТЗКонтр[0].ExternalID);
			Если ТЗКонтрагентКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_КонтрагентКонсолидированный = ТЗКонтрагентКонсолидированный[0].Ссылка;
				
				ДокументОбъект.Контрагент =	НайтиКонтрагентаПоКонсолидированному(ДокументОбъект.пик_КонтрагентКонсолидированный);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный контрагент в 1С");
				//Возврат;
			КонецЕсли;
			
			
		КонецЕсли;
		
		// консолидированный договор	
		Если СтрокаЗаписи.ContractGuid1C<>"" Тогда
			ТЗдоговорКонсолидированный = ПоискСправочника("Справочник.пик_ДоговорыКонтрагентовКонсолидированные",СтрокаЗаписи.ContractGuid1C);
			Если ТЗдоговорКонсолидированный.Количество()<>0 Тогда
				ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный = ТЗдоговорКонсолидированный[0].Ссылка;
				
				ДокументОбъект.ДоговорКонтрагента = НайтиЛокальныйДоговорКонтрагента(Организация,ДокументОбъект.пик_КонтрагентКонсолидированный, ДокументОбъект.пик_ДоговорКонтрагентаКонсолидированный, ДокументОбъект.Контрагент);
				
			ИначеЕсли  СтрокаЗаписи.ContractGuid1C<>"" Тогда  
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный договор в 1С");
				//Возврат;
			КонецЕсли;
		КонецЕсли;
		
		
		// бс контрагента
		Если СтрокаЗаписи.ContractorAccountGuid1C <> "" Тогда
			ТЗБСКонтрагентаКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.ContractorAccountGuid1C);
			Если ТЗБСКонтрагентаКонс.Количество()<>0 Тогда
				БСКонтрагентаКонс = ТЗБСКонтрагентаКонс[0].Ссылка;
				ДокументОбъект.СчетКонтрагента = ПолучитьЛокальныйБС(БСКонтрагентаКонс, ДокументОбъект.Контрагент);
				Если ДокументОбъект.СчетКонтрагента.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		// бс организации
		Если СтрокаЗаписи.CompanyAccountGuid1C <> "" Тогда
			ТЗБСОргКонс = ПоискСправочника("Справочник.пик_БанковскиеСчетаКонсолидированные",СтрокаЗаписи.CompanyAccountGuid1C);
			Если ТЗБСОргКонс.Количество()<>0 Тогда
				БСОргКонс = ТЗБСОргКонс[0].Ссылка;
				ДокументОбъект.СчетОрганизации = ПолучитьЛокальныйБС(БСОргКонс, Организация);
				Если ДокументОбъект.СчетОрганизации.Пустая() Тогда
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден банковский счет организации по консолидированному");
				КонецЕсли;	
			Иначе
				ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден консолидированный банковский счет организации в 1С");
				//Возврат;
			КонецЕсли;	
			
		КонецЕсли;	
		
		//если ДокументОбъект.ВидОперации =  Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание
		
		ДокументОбъект.РасшифровкаПлатежа.Очистить();
		
		Счета = БухгалтерскийУчетПереопределяемый.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		СчетВзаиморасчетов = Счета.СчетРасчетов;
		СчетАвансов = Счета.СчетАвансов;
		Для Каждого СтрокаТЧ Из ЗаписиТЧ Цикл
			НоваяСтрока = ДокументОбъект.РасшифровкаПлатежа.добавить(); 	
			НоваяСтрока.ДоговорКонтрагента =  ДокументОбъект.ДоговорКонтрагента;
			НоваяСтрока.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			НоваяСтрока.СуммаПлатежа  = СтрокаТЧ.Sum;
			НоваяСтрока.СуммаВзаиморасчетов  = СтрокаТЧ.SumSettlement;
			Если ДокументОбъект.ВалютаДокумента =  ВалРег тогда
				НоваяСтрока.КурсВзаиморасчетов = 1;
				НоваяСтрока.КратностьВзаиморасчетов = 1;
			КонецЕсли;	
			НоваяСтрока.СчетУчетаРасчетовСКонтрагентом = СчетВзаиморасчетов; 
			НоваяСтрока.СчетУчетаРасчетовПоАвансам = СчетАвансов; 
			
			Если СтрокаТЧ.ObjectInvestmentGuid1C <> "" Тогда 
				
				ТЗОбъектыИДП = ПоискСправочника("Справочник.пик_ОбъектыИДП", СтрокаТЧ.ObjectInvestmentGuid1C);
				Если ТЗОбъектыИДП<>0 Тогда
					НоваяСтрока.пик_Подразделение = пик_ОбъектыУчета.ПолучитьОбъектУчета(Организация,,ТЗОбъектыИДП[0].Ссылка,Истина);
				Иначе	
					ЗаписьВРегистрОшибок(Система, ИмяТипа1С, Организация, СтрокаЗаписи.Guid1C, Перечисления.пик_ПричиныОшибкиЗагрузки.НеНайденоПоле,"Не найден объект ИДП в 1С");
					//Возврат;
				КонецЕсли; 
				
				
			КонецЕсли; 
			
			// заполнение НДС
			СтавкаНДС = ПоискПеречисления("Перечисление.СтавкиНДС", СтрокаЗаписи.VATRateEnum, ConnectionSQL);
			
			НоваяСтрока.СтавкаНДС = СтавкаНДС;
				НоваяСтрока.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(
				НоваяСтрока.СуммаПлатежа,
				Истина,
				УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС))
					
			
		КонецЦикла; 	
		
		ДокументОбъект.обменданными.загрузка = истина;
		ДокументОбъект.записать(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	#КонецОбласти

КонецПроцедуры	

Функция ПолучитьСтруктуруДанныхПлатежки(ИмяТипа1С)
	СтруктураДанных = Новый Структура() ;
	
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeWriteOffFromAccount",0);
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		СтруктураДанных.Вставить("DateInDocument",'00010101');
		
		СтруктураДанных.Вставить("DateUpload",'00010101');
		СтруктураДанных.Вставить("DateMakeBank",'00010101');
		СтруктураДанных.Вставить("ContractGuid1C","");
		СтруктураДанных.Вставить("MainContractGuid1C","");
		СтруктураДанных.Вставить("PaymentId","");
		СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		СтруктураДанных.Вставить("PaymentPurpose","");
		СтруктураДанных.Вставить("NotConfirmBankStatement",0);
		СтруктураДанных.Вставить("NumInDocument","");
		СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		СтруктураДанных.Вставить("MainContractorGuid1C","");
		СтруктураДанных.Вставить("ResponsibleGuid1C","");
		СтруктураДанных.Вставить("MakeBank",0);
		СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("VersionNumber","");
		СтруктураДанных.Вставить("VersionNumberString","");
		
		
		СтруктураДанных.Вставить("Version1C","");
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("Posted",0);
		СтруктураДанных.Вставить("Marked",0);
		СтруктураДанных.Вставить("Date",'00010101');
		СтруктураДанных.Вставить("Number",0);
		СтруктураДанных.Вставить("CompanyGuid1C","");
		СтруктураДанных.Вставить("CurrencyGuid1C","");
		СтруктураДанных.Вставить("DocumentCurrencyGuid1C","");
		СтруктураДанных.Вставить("OperationTypeRecieptOnAccount",0);
		СтруктураДанных.Вставить("OperationTypeBudgetGuid1C","");
		СтруктураДанных.Вставить("DateInDocument",'00010101');
		
		СтруктураДанных.Вставить("DateUpload",'00010101');
		СтруктураДанных.Вставить("DateMakeBank",'00010101');
		СтруктураДанных.Вставить("ContractGuid1C","");
		СтруктураДанных.Вставить("MainContractGuid1C","");
		СтруктураДанных.Вставить("PaymentId","");
		СтруктураДанных.Вставить("ContractorName","");
		СтруктураДанных.Вставить("Comment","");
		СтруктураДанных.Вставить("Contractor_IID","");
		СтруктураДанных.Вставить("PaymentPurpose","");
		СтруктураДанных.Вставить("NumInDocument","");
		СтруктураДанных.Вставить("ContractorCompanyGuid1C","");
		СтруктураДанных.Вставить("MainContractorGuid1C","");
		СтруктураДанных.Вставить("ResponsibleGuid1C","");
		СтруктураДанных.Вставить("MakeBank",0);
		СтруктураДанных.Вставить("AccountsThirdParties",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("SumDoc",0);
		СтруктураДанных.Вставить("ContractorAccountGuid1C","");
		СтруктураДанных.Вставить("CompanyAccountGuid1C","");
		СтруктураДанных.Вставить("TypeOperBudgetEnum",0);
		СтруктураДанных.Вставить("TypePaymentDocumentEnum",0);
		СтруктураДанных.Вставить("VersionNumber","");
		СтруктураДанных.Вставить("VersionNumberString","");
		
		
		СтруктураДанных.Вставить("Version1C","");
		СтруктураДанных.Вставить("SumVAT","");
		СтруктураДанных.Вставить("VATRateEnum",0);
	КонецЕсли;
	

	Возврат  СтруктураДанных;
КонецФункции

Функция ПолучитьСтруктуруДанныхПлатежки_ТЧ(ИмяТипа1С)
	СтруктураДанных = Новый Структура() ;
	Если ИмяТипа1С = "Документ.СписаниеСРасчетногоСчета" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;
	
	Если ИмяТипа1С = "Документ.ПоступлениеНаРасчетныйСчет" Тогда
		СтруктураДанных.Вставить("Guid1C","");
		СтруктураДанных.Вставить("ActivityTypeGuid1C","");
		СтруктураДанных.Вставить("IdPositionBudget","");
		СтруктураДанных.Вставить("ObjectInvestmentGuid1C","");
		СтруктураДанных.Вставить("ArticleCashFlowGuid1C","");
		СтруктураДанных.Вставить("Amount",0);
		СтруктураДанных.Вставить("SumSettlement",0);
		СтруктураДанных.Вставить("Sum",0);
		СтруктураДанных.Вставить("BudgetTypeGuid1C","");
	КонецЕсли;

	Возврат  СтруктураДанных;
КонецФункции	

#КонецОбласти

#Область ЗагрузкаСправочников

Процедура ЗагрузитьСправочникиЕФС() экспорт

	СтрПодключения = ПолучитьСтрокуПодключения();
	
	clnConn = Неопределено;
	ConnectionSQL = УстановитьСоединениеSQL(СтрПодключения, clnConn);
	
	ОграничениеТрафика = ПолучитьОграничениеТрафика();
	
	//ОрганизацииДляЗагрузки = ПолучитьОрганизацииДляЗагрузки();
	
	// ВАЛЮТЫ
	//ЗагрузитьВалюты(ConnectionSQL, ОграничениеТрафика);
	
	ConnectionSQL.Close();
	
КонецПроцедуры	

Процедура ЗагрузитьВалюты(ConnectionSQL, ОграничениеТрафика)
	Система = Перечисления.пик_СистемыХраненияДанных.CDW;
	ПустОрг = Справочники.Организации.ПустаяСсылка(); 
	
	ТекМаксВерсия = ПолучитьМаксимальнуюВерсию("Справочник.Валюты", Система, ПустОрг);
	
	
КонецПроцедуры	

#КонецОбласти 

#Область ОперацииCMSSQL

Функция УстановитьСоединениеSQL(СтрПодключения="",clnConn) Экспорт
	
	Если СтрПодключения = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка 
		Если clnConn = Неопределено Тогда 
			clnConn = Новый COMОбъект("ADODB.Connection");
			clnConn.ConnectionTimeOut = 15 ;
			clnConn.CommandTimeout = 500 ;
			clnConn.Open(СтрПодключения);
						
		ИначеЕсли clnConn.State = 0 Тогда	
			clnConn = Новый COMОбъект("ADODB.Connection");
			clnConn.ConnectionTimeOut = 15 ;
			clnConn.CommandTimeout = 500 ;
			clnConn.Open(СтрПодключения);
						
		КонецЕсли;
		Возврат clnConn;
	Исключение
		Возврат clnConn;
	КонецПопытки;	
КонецФункции	

Процедура СформироватьиВыполнитьUPDATEЗапросSQL(ИмяТаблицы,СтруктураДанных,СтруктураОтбора,ConnectSQL) Экспорт
	
	str1="UPDATE "+ИмяТаблицы+" SET ";
	для каждого стр из Структураданных цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"',";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]=" +?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + ","; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"]=Null,";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+СтрЗаменить(стр.Значение,"'"," ")+"',";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"',";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-1);
	
	str1 = str1 + " WHERE ";
	для каждого стр из СтруктураОтбора цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='" + ?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + "' AND "; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"] IS Null AND";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"' AND ";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-4);
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Процедура СформироватьиВыполнитьDELETEЗапросSQL(ИмяТаблицы,Структураданных,ConnectSQL) Экспорт
	
	str1="DELETE FROM "+ИмяТаблицы+" where ";
	для каждого стр из Структураданных цикл
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str1 = str1 + "[" + стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' AND ";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str1 = str1 + "[" + стр.Ключ +"]='" + Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0") + "' AND "; 
		ИначеЕсли стр.Значение = Null Тогда	
			str1 = str1 + "[" + стр.Ключ +"] IS Null AND ";
		Иначе	 
			str1 = str1 + "[" + стр.Ключ +"]='"+стр.Значение+"' AND ";
		КонецЕсли;	
	конеццикла;	 
	str1 = Лев(str1,стрдлина(str1)-4);
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Процедура СформироватьиВыполнитьINSERTЗапросSQL(ИмяТаблицы,Структураданных,ConnectSQL) Экспорт
	
	str_v = "";
	str_f = "";
	для каждого стр из Структураданных цикл
		str_f = str_f + "[" +стр.Ключ+"],";
		Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
			str_v = str_v + ?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
			str_v = str_v + "'"+?(стр.Значение=Истина,1,0)+"'"+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
			str_v = str_v + ?(стр.Значение = 0,0,Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0")) + ","; 
		ИначеЕсли стр.Значение = Null Тогда	
			str_v = str_v + "Null"+",";
		ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") Тогда
			str_v = str_v + "N'"+СтрЗаменить(стр.Значение,"'"," ")+"'"+",";
		Иначе	 
			str_v = str_v + "'"+стр.Значение+"'"+",";
		КонецЕсли;	
	конеццикла;	 
	str_v = Лев(str_v,стрдлина(str_v)-1);
	str_f = Лев(str_f,стрдлина(str_f)-1);
	
	str1="INSERT INTO "+ИмяТаблицы+"("+str_f+") VALUES ("+str_v+")";
	ConnectSQL.Execute(str1);
	
КонецПроцедуры

Функция	СформироватьиВыполнитьSELECTЗапросSQL(ИмяТаблицы,СтруктураДанных,СтруктураОтбора,ConnectSQL,ДопУсловиеВыбоки="",СтруктураСортировки=Неопределено,СтруктураГруппировки=Неопределено) Экспорт
	Перем РезультатЗапроса;	
	
	str1="SELECT "+ДопУсловиеВыбоки+" ";
	
	РезультатЗапроса = Новый ТаблицаЗначений;
	
	если СтруктураДанных = Неопределено или СтруктураДанных.Количество()=0 Тогда
		str1 = str1 + "*  ";
	иначе	
		для каждого стр из СтруктураДанных цикл
			Если стр.Ключ = "VersionNumberString"  Тогда
				//str1 = str1 + " CONVERT(BINARY(8), [VersionNumber]) as VersionNumberString," ;
				str1 = str1 + " CONVERT(NVARCHAR(MAX), CONVERT(BINARY(8), [VersionNumber]), 1) as VersionNumberString," ;
				
			Иначе
			
				str1 = str1 + "[" + стр.Ключ +"],";
			КонецЕсли;
			//РезультатЗапроса.Колонки.Добавить(стр.Ключ);
		конеццикла;	 
	конецесли;	
	str1 = Лев(str1,стрдлина(str1)-1);
	
	если СтруктураОтбора = Неопределено Тогда
		str1 = str1 + " FROM " + ИмяТаблицы;
	иначе
		str1 = str1 + " FROM " + ИмяТаблицы + " WHERE ";
		ПервПр=ИСтина;
		для каждого стр из СтруктураОтбора цикл
			Если ПервПр=Истина Тогда
				УсловиеСдругими = "";
			Иначе	
				УсловиеСдругими = " AND ";
			КонецЕсли;	
			Если ТипЗнч(стр.Значение) = тип("Дата") Тогда
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]="+?(ЗначениеЗаполнено(стр.Значение)=ложь,"Null","convert(datetime,'"+Формат(стр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Булево") Тогда
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]='"+?(стр.Значение=Истина,1,0)+"' ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Число") Тогда
				str1 = str1 + УсловиеСдругими + "[" + стр.Ключ +"]='" + Формат(стр.Значение,"ЧРД=.; ЧН=; ЧГ=0") + "' "; 
			ИначеЕсли стр.Значение = Null Тогда	
				str1 = str1 + УсловиеСдругими + "[" + стр.Ключ +"] IS NULL ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "bkt_lft" Тогда
				str1 = str1 + " ( ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "bkt_pgt" Тогда
				str1 = str1 + " ) ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Строка") И стр.Ключ = "some_text" Тогда
				str1 = str1 + " "+стр.Значение+" ";
			ИначеЕсли ТипЗнч(стр.Значение) = тип("Структура") Тогда
				для каждого влстр из стр.Значение цикл
					Если ПервПр=Истина Тогда
						УсловиеСдругими = "";
					Иначе	
						УсловиеСдругими = стр.Значение["УсловиеСдругими"];
					КонецЕсли;	
					Если ТипЗнч(влстр.Значение) = тип("Дата") Тогда 
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+?(ЗначениеЗаполнено(влстр.Значение)=ложь,"Null","convert(datetime,'"+Формат(влстр.Значение,"Л=ru_RU; ДЛФ=DT")+"',104)")+" ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Булево") Тогда
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+?(влстр.Значение=Истина,1,0)+"' ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Число") Тогда
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+ Формат(влстр.Значение,"ЧРД=.; ЧН=; ЧГ=0")+"' ";
					ИначеЕсли влстр.Значение = Null Тогда	
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+?(стр.Значение["ВидСравнения"]="="," IS NULL "," IS NOT NULL ")+" ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Строка") И влстр.Ключ = "bkt_lft" Тогда	
						str1 = str1 + " ( ";
					ИначеЕсли ТипЗнч(влстр.Значение) = тип("Строка") И влстр.Ключ = "bkt_pgt" Тогда	
						str1 = str1 + " ) ";
					Иначе
						str1 = str1 + УсловиеСдругими + " " + "[" +влстр.Ключ +"]"+стр.Значение["ВидСравнения"]+"'"+влстр.Значение+"' ";
					КонецЕсли;
					прервать;	
				конеццикла;
			Иначе	 
				str1 = str1 + УсловиеСдругими + "[" +стр.Ключ +"]='"+стр.Значение+"' ";
			КонецЕсли;	
			ПервПр=Ложь;
		конеццикла;	 
		//str1  = Лев(str1,стрдлина(str1)-4);
	конецесли;
	
	если СтруктураСортировки <> Неопределено Тогда
		str1 = str1 + " ORDER BY ";
		для каждого стр из СтруктураСортировки цикл
			str1 = str1 + "[" + стр.Ключ +"] "+стр.Значение+",";
		конеццикла;	 
		str1 = Лев(str1,стрдлина(str1)-1);
	конецесли;	
	
	если СтруктураГруппировки <> Неопределено Тогда
		str1 = str1 + " GROUP BY ";
		для каждого стр из СтруктураГруппировки цикл
			str1 = str1 + "[" + стр.Ключ +"] "+стр.Значение+",";
		конеццикла;	 
		str1 = Лев(str1,стрдлина(str1)-1);
	конецесли;	
	
	Quiry = ConnectSQL.Execute(str1);
	
	count = 0;
	While Quiry.EOF()=False Цикл
		
		если count = 0 тогда
			для каждого стр из СтруктураДанных цикл
				type = Quiry.Fields(стр.Ключ).Type;
				если type = 200 ИЛИ type = 202 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).DefinedSize));
				иначеесли  Type = 72   тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(50));
				иначеесли type = 135 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Дата",,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
				иначеесли type = 131 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,Quiry.Fields(стр.Ключ).NumericScale));
				иначеесли type = 3 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision));
				иначеесли type = 17 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision));
				иначеесли type = 6 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,4));
				иначеесли type = 5 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(Quiry.Fields(стр.Ключ).Precision,Quiry.Fields(стр.Ключ).DefinedSize));
				иначеесли type = 201 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).NumericScale));
				иначеесли type = 11 тогда
					ОписаниеТипа = Новый ОписаниеТипов("Число",,Новый КвалификаторыЧисла(1));
				иначе	
					ОписаниеТипа = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(Quiry.Fields(стр.Ключ).DefinedSize));
				конецесли;	
				РезультатЗапроса.Колонки.Добавить(стр.Ключ, ОписаниеТипа );
			конеццикла;	 
		конецесли;	
		
		count = count + 1;
		
		new_str_kontr = РезультатЗапроса.add();
		
		for Each n in РезультатЗапроса.Columns do 
			new_str_kontr[n.name] 	=	Quiry.Fields(n.name).Value;
			//если ссылка, то убираем фигурные скобки
			Если Quiry.Fields(n.name).Type = 72 Тогда
				new_str_kontr[n.name] 	=	СтрЗаменить(new_str_kontr[n.name], "{", "");
				new_str_kontr[n.name] 	=	СтрЗаменить(new_str_kontr[n.name], "}", "");
			КонецЕсли;	
		enddo;	
		
		Quiry.MoveNext(); 
		
	Enddo;
	
	Если РезультатЗапроса.Количество()=0  Тогда
		Если СтруктураДанных <> Неопределено Тогда 
			для каждого стр из СтруктураДанных цикл
				РезультатЗапроса.Колонки.Добавить(стр.Ключ);
			конеццикла;	 
		Иначе
			
		КонецЕсли;
	КонецЕсли;
	
	возврат РезультатЗапроса;
	
КонецФункции
	
#КонецОбласти